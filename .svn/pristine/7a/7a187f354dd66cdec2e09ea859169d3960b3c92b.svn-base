package com.cnpc;


import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.InetSocketAddress;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.ScanParams;
import redis.clients.jedis.ScanResult;

import com.alibaba.otter.canal.client.CanalConnector;
import com.alibaba.otter.canal.client.CanalConnectors;
import com.alibaba.otter.canal.common.utils.AddressUtils;
import com.alibaba.otter.canal.protocol.CanalEntry.Column;
import com.alibaba.otter.canal.protocol.CanalEntry.Entry;
import com.alibaba.otter.canal.protocol.CanalEntry.EntryType;
import com.alibaba.otter.canal.protocol.CanalEntry.EventType;
import com.alibaba.otter.canal.protocol.CanalEntry.RowChange;
import com.alibaba.otter.canal.protocol.CanalEntry.RowData;
import com.alibaba.otter.canal.protocol.Message;
import com.alibaba.otter.canal.protocol.exception.CanalClientException;

public class RedisCleaner {

	private static final Logger log = LoggerFactory.getLogger(RedisCleaner.class);

	public static String redisHost;
	public static Integer redisPort;
	/**
	 * key: 表, value: 表关联的视图
	 */
	private static Map<String, Set<String>> tableViewMap;
	
	/**
	 * 忽略此表变化
	 */
	private static Set<String> ignoreTables;
	
	
    public static void main(String args[]) {
    	
    	Map<String, Set<String>> viewTableMap = new HashMap<>();
		try {
			java.util.Properties prop = new java.util.Properties(); 
			prop.load(RedisCleaner.class.getResourceAsStream("/redis.properties")); 
			redisHost = prop.getProperty("redis.host");
			redisPort = Integer.valueOf(prop.getProperty("redis.port"));

			prop = new java.util.Properties(); 
			prop.load(RedisCleaner.class.getResourceAsStream("/view-table.properties")); 
			for(Object p : prop.keySet()){
				String view = (String)p;
				if(!viewTableMap.containsKey(view)){
					viewTableMap.put(view.toUpperCase(), new HashSet<String>());
				}
				String[] tables = prop.getProperty(view).split(",");
				for(String table : tables){
					if(table == null || table.equals(""))
						continue;
					viewTableMap.get(view).add(table.toUpperCase());
				}
			}

			ignoreTables = new HashSet<>();
			prop.load(RedisCleaner.class.getResourceAsStream("/ignore.properties")); 
			String[] ignores = prop.getProperty("ignore").split(",");
			for(String ignore : ignores){
				ignoreTables.add(ignore);
			}
		} catch (UnsupportedEncodingException e) {
			log.error("redis配置读取失败，终止运行:"+e.getMessage());
			return;
		} catch (IOException e) {
			log.error("redis配置读取失败，IO异常，终止运行:"+e.getMessage());
			return;
		}
		
		// 转换
		tableViewMap = new HashMap<>();
		for(String view : viewTableMap.keySet()){
			Set<String> tables = viewTableMap.get(view);
			for(String table : tables){
				if(!tableViewMap.containsKey(table)){
					tableViewMap.put(table, new HashSet<String>());
				}
				tableViewMap.get(table).add(view);
			}
		}
		
		
        // 创建链接
        CanalConnector connector = CanalConnectors.newSingleConnector(
					        			new InetSocketAddress(AddressUtils.getHostIp(), 11111), 
					        			"example", "", "");
        int batchSize = 1000;
        while(true) {
	        try {
	            connector.connect();
	            connector.subscribe(".*\\..*");
	            connector.rollback();
	            
	            log.info("canal客户端连接成功...");
	            
	            while (true) {
	                Message message = connector.getWithoutAck(batchSize); // 获取指定数量的数据
	                long batchId = message.getId();
	                int size = message.getEntries().size();
	                if (batchId == -1 || size == 0) {
	                    try {Thread.sleep(3000);} catch (InterruptedException e) {}
	                } else {
	                    // System.out.printf("message[batchId=%s,size=%s] \n", batchId, size);
	                    cleanRedis(message.getEntries());
	                }
	
	                connector.ack(batchId); // 提交确认
	                // connector.rollback(batchId); // 处理失败, 回滚数据
	            }
	        } catch(CanalClientException ex){
	        	log.error("canal客户端报错，重试...", ex);
                try {Thread.sleep(3000);} catch (InterruptedException e) {}
	        } finally {
	            connector.disconnect();
	        }
        }
    }

    
    private static void cleanRedis(List<Entry> entrys) {
    	log.debug("开始删除redis中包含表名的key...");
    	Set<String> tableNames = new HashSet<>();
        for (Entry entry : entrys) {
            if (entry.getEntryType() == EntryType.TRANSACTIONBEGIN || entry.getEntryType() == EntryType.TRANSACTIONEND) {
                continue;
            }

            RowChange rowChage = null;
            try {
                rowChage = RowChange.parseFrom(entry.getStoreValue());
            } catch (Exception e) {
                throw new RuntimeException("ERROR ## parser of eromanga-event has an error , data:" + entry.toString(),
                                           e);
            }

            EventType eventType = rowChage.getEventType();
            
            String tableName = entry.getHeader().getTableName();
            if(tableName != null && !tableName.equals("")){
            	tableNames.add(tableName.toUpperCase());
            }
            log.debug(String.format("================> binlog[%s:%s] , name[%s,%s] , eventType : %s",
                                             entry.getHeader().getLogfileName(), entry.getHeader().getLogfileOffset(),
                                             entry.getHeader().getSchemaName(), entry.getHeader().getTableName(),
                                             eventType));

            for (RowData rowData : rowChage.getRowDatasList()) {
                if (eventType == EventType.DELETE) {
                    printColumn(rowData.getBeforeColumnsList());
                } else if (eventType == EventType.INSERT) {
                    printColumn(rowData.getAfterColumnsList());
                } else {
//                    log.debug("-------> before");
                    printColumn(rowData.getBeforeColumnsList());
//                    log.debug("-------> after");
                    printColumn(rowData.getAfterColumnsList());
                }
            }
        }

        // 添加表相关的视图
        Set<String> tmp = new HashSet<>();
        for(String tableName : tableNames){
        	if(tableViewMap.containsKey(tableName)){
        		tmp.addAll(tableViewMap.get(tableName));
        	}
        }
        tableNames.addAll(tmp);
        
        // 清redis
        try{
        	Set<String> logTables = new HashSet<>();
        	int deleteCount = 0;
	        Jedis redis = new Jedis(redisHost, redisPort);
	        for(String tableName : tableNames){
	        	if(ignoreTables.contains(tableName.toUpperCase())){
	        		continue;
	        	}
	        	ScanParams params = null;
	        	String pattern = null;
	        	ScanResult scanResult = null;
	        	String cur = "0";
	        	do{
		        	params = new ScanParams();
		        	pattern = "*"+getPatternIgnoreCase(tableName)+"*";
		        	params.match(pattern);
		        	params.count(30);
		        	scanResult = redis.scan(cur, params);
		        	cur = scanResult.getStringCursor();
		        	List matchedKeys = scanResult.getResult();
		        	for(Object k : matchedKeys){
		        		String sql = (String)k;
	        			redis.del(sql);
	        			deleteCount++;
	        			logTables.add(tableName);
		        	}
	        	}while(!cur.equals("0"));
	        }
	        log.debug("结束删除,共删除{}个key,关于表{}", deleteCount, logTables);
        }catch(Exception ex){
        	log.error("清空redis时报错", ex);
        }
    }

    private static void printColumn(List<Column> columns) {
        for (Column column : columns) {
            log.trace(column.getName() + " : " + column.getValue() + "    update=" + column.getUpdated());
        }
    }
    
    
    private static String getPatternIgnoreCase(String pat){
    	StringBuffer sb = new StringBuffer();
    	for(int i = 0; i < pat.length(); i++){
    		String s = String.valueOf(pat.charAt(i));
    		if(s.equals("_")){
    			sb.append(s);
    		}else{
    			sb.append("[");
	    		sb.append(s.toUpperCase()).append(s.toLowerCase());
	    		sb.append("]");
    		}
    	}
    	return sb.toString();
    }
}